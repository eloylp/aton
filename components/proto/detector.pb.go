// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.1
// source: detector.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CapturerStatus int32

const (
	CapturerStatus_CAPTURER_STATUS_OK               CapturerStatus = 0
	CapturerStatus_CAPTURER_STATUS_CONNECTION_RETRY CapturerStatus = 1
)

// Enum value maps for CapturerStatus.
var (
	CapturerStatus_name = map[int32]string{
		0: "CAPTURER_STATUS_OK",
		1: "CAPTURER_STATUS_CONNECTION_RETRY",
	}
	CapturerStatus_value = map[string]int32{
		"CAPTURER_STATUS_OK":               0,
		"CAPTURER_STATUS_CONNECTION_RETRY": 1,
	}
)

func (x CapturerStatus) Enum() *CapturerStatus {
	p := new(CapturerStatus)
	*p = x
	return p
}

func (x CapturerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapturerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_detector_proto_enumTypes[0].Descriptor()
}

func (CapturerStatus) Type() protoreflect.EnumType {
	return &file_detector_proto_enumTypes[0]
}

func (x CapturerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapturerStatus.Descriptor instead.
func (CapturerStatus) EnumDescriptor() ([]byte, []int) {
	return file_detector_proto_rawDescGZIP(), []int{0}
}

type HealthCheckResponse_ServingStatus int32

const (
	HealthCheckResponse_UNKNOWN     HealthCheckResponse_ServingStatus = 0
	HealthCheckResponse_SERVING     HealthCheckResponse_ServingStatus = 1
	HealthCheckResponse_NOT_SERVING HealthCheckResponse_ServingStatus = 2
)

// Enum value maps for HealthCheckResponse_ServingStatus.
var (
	HealthCheckResponse_ServingStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVING",
		2: "NOT_SERVING",
	}
	HealthCheckResponse_ServingStatus_value = map[string]int32{
		"UNKNOWN":     0,
		"SERVING":     1,
		"NOT_SERVING": 2,
	}
)

func (x HealthCheckResponse_ServingStatus) Enum() *HealthCheckResponse_ServingStatus {
	p := new(HealthCheckResponse_ServingStatus)
	*p = x
	return p
}

func (x HealthCheckResponse_ServingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheckResponse_ServingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_detector_proto_enumTypes[1].Descriptor()
}

func (HealthCheckResponse_ServingStatus) Type() protoreflect.EnumType {
	return &file_detector_proto_enumTypes[1]
}

func (x HealthCheckResponse_ServingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheckResponse_ServingStatus.Descriptor instead.
func (HealthCheckResponse_ServingStatus) EnumDescriptor() ([]byte, []int) {
	return file_detector_proto_rawDescGZIP(), []int{8, 0}
}

type LoadCategoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []string `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	Image      []byte   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *LoadCategoriesRequest) Reset() {
	*x = LoadCategoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_detector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadCategoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadCategoriesRequest) ProtoMessage() {}

func (x *LoadCategoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_detector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadCategoriesRequest.ProtoReflect.Descriptor instead.
func (*LoadCategoriesRequest) Descriptor() ([]byte, []int) {
	return file_detector_proto_rawDescGZIP(), []int{0}
}

func (x *LoadCategoriesRequest) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *LoadCategoriesRequest) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type InformStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval *duration.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *InformStatusRequest) Reset() {
	*x = InformStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_detector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InformStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InformStatusRequest) ProtoMessage() {}

func (x *InformStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_detector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InformStatusRequest.ProtoReflect.Descriptor instead.
func (*InformStatusRequest) Descriptor() ([]byte, []int) {
	return file_detector_proto_rawDescGZIP(), []int{1}
}

func (x *InformStatusRequest) GetInterval() *duration.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string      `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Capturers   []*Capturer `protobuf:"bytes,2,rep,name=capturers,proto3" json:"capturers,omitempty"`
	System      *System     `protobuf:"bytes,3,opt,name=system,proto3" json:"system,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_detector_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_detector_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_detector_proto_rawDescGZIP(), []int{2}
}

func (x *Status) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Status) GetCapturers() []*Capturer {
	if x != nil {
		return x.Capturers
	}
	return nil
}

func (x *Status) GetSystem() *System {
	if x != nil {
		return x.System
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetectorUuid  string               `protobuf:"bytes,1,opt,name=detector_uuid,json=detectorUuid,proto3" json:"detector_uuid,omitempty"`
	Recognized    []string             `protobuf:"bytes,2,rep,name=recognized,proto3" json:"recognized,omitempty"`
	TotalEntities int32                `protobuf:"varint,3,opt,name=totalEntities,proto3" json:"totalEntities,omitempty"`
	RecognizedAt  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=recognized_at,json=recognizedAt,proto3" json:"recognized_at,omitempty"`
	CapturedAt    *timestamp.Timestamp `protobuf:"bytes,5,opt,name=captured_at,json=capturedAt,proto3" json:"captured_at,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_detector_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_detector_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_detector_proto_rawDescGZIP(), []int{3}
}

func (x *Result) GetDetectorUuid() string {
	if x != nil {
		return x.DetectorUuid
	}
	return ""
}

func (x *Result) GetRecognized() []string {
	if x != nil {
		return x.Recognized
	}
	return nil
}

func (x *Result) GetTotalEntities() int32 {
	if x != nil {
		return x.TotalEntities
	}
	return 0
}

func (x *Result) GetRecognizedAt() *timestamp.Timestamp {
	if x != nil {
		return x.RecognizedAt
	}
	return nil
}

func (x *Result) GetCapturedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CapturedAt
	}
	return nil
}

type Capturer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid   string         `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Url    string         `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Status CapturerStatus `protobuf:"varint,3,opt,name=status,proto3,enum=proto.CapturerStatus" json:"status,omitempty"`
}

func (x *Capturer) Reset() {
	*x = Capturer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_detector_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capturer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capturer) ProtoMessage() {}

func (x *Capturer) ProtoReflect() protoreflect.Message {
	mi := &file_detector_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capturer.ProtoReflect.Descriptor instead.
func (*Capturer) Descriptor() ([]byte, []int) {
	return file_detector_proto_rawDescGZIP(), []int{4}
}

func (x *Capturer) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Capturer) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Capturer) GetStatus() CapturerStatus {
	if x != nil {
		return x.Status
	}
	return CapturerStatus_CAPTURER_STATUS_OK
}

type AddCapturerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CapturerUuid string `protobuf:"bytes,1,opt,name=capturer_uuid,json=capturerUuid,proto3" json:"capturer_uuid,omitempty"`
	CapturerUrl  string `protobuf:"bytes,2,opt,name=capturer_url,json=capturerUrl,proto3" json:"capturer_url,omitempty"`
}

func (x *AddCapturerRequest) Reset() {
	*x = AddCapturerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_detector_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCapturerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCapturerRequest) ProtoMessage() {}

func (x *AddCapturerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_detector_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCapturerRequest.ProtoReflect.Descriptor instead.
func (*AddCapturerRequest) Descriptor() ([]byte, []int) {
	return file_detector_proto_rawDescGZIP(), []int{5}
}

func (x *AddCapturerRequest) GetCapturerUuid() string {
	if x != nil {
		return x.CapturerUuid
	}
	return ""
}

func (x *AddCapturerRequest) GetCapturerUrl() string {
	if x != nil {
		return x.CapturerUrl
	}
	return ""
}

type RemoveCapturerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CapturerUuid string `protobuf:"bytes,1,opt,name=capturer_uuid,json=capturerUuid,proto3" json:"capturer_uuid,omitempty"`
}

func (x *RemoveCapturerRequest) Reset() {
	*x = RemoveCapturerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_detector_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCapturerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCapturerRequest) ProtoMessage() {}

func (x *RemoveCapturerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_detector_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCapturerRequest.ProtoReflect.Descriptor instead.
func (*RemoveCapturerRequest) Descriptor() ([]byte, []int) {
	return file_detector_proto_rawDescGZIP(), []int{6}
}

func (x *RemoveCapturerRequest) GetCapturerUuid() string {
	if x != nil {
		return x.CapturerUuid
	}
	return ""
}

type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_detector_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_detector_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_detector_proto_rawDescGZIP(), []int{7}
}

func (x *HealthCheckRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status HealthCheckResponse_ServingStatus `protobuf:"varint,1,opt,name=status,proto3,enum=proto.HealthCheckResponse_ServingStatus" json:"status,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_detector_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_detector_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_detector_proto_rawDescGZIP(), []int{8}
}

func (x *HealthCheckResponse) GetStatus() HealthCheckResponse_ServingStatus {
	if x != nil {
		return x.Status
	}
	return HealthCheckResponse_UNKNOWN
}

var File_detector_proto protoreflect.FileDescriptor

var file_detector_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x15, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x22, 0x4c, 0x0a, 0x13, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x22, 0x80, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x09, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x52, 0x09, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x06,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x22, 0xf1, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x63,
	0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5f, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5c, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x22, 0x3c, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3a,
	0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x4e, 0x0a, 0x0e, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x01, 0x32, 0xd4, 0x02, 0x0a, 0x08, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x0e, 0x4c, 0x6f, 0x61, 0x64, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x3b, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x64, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x32, 0x8a, 0x01, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x05,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x29,
	0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x6f,
	0x79, 0x6c, 0x70, 0x2f, 0x61, 0x74, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_detector_proto_rawDescOnce sync.Once
	file_detector_proto_rawDescData = file_detector_proto_rawDesc
)

func file_detector_proto_rawDescGZIP() []byte {
	file_detector_proto_rawDescOnce.Do(func() {
		file_detector_proto_rawDescData = protoimpl.X.CompressGZIP(file_detector_proto_rawDescData)
	})
	return file_detector_proto_rawDescData
}

var file_detector_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_detector_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_detector_proto_goTypes = []interface{}{
	(CapturerStatus)(0),                    // 0: proto.CapturerStatus
	(HealthCheckResponse_ServingStatus)(0), // 1: proto.HealthCheckResponse.ServingStatus
	(*LoadCategoriesRequest)(nil),          // 2: proto.LoadCategoriesRequest
	(*InformStatusRequest)(nil),            // 3: proto.InformStatusRequest
	(*Status)(nil),                         // 4: proto.Status
	(*Result)(nil),                         // 5: proto.Result
	(*Capturer)(nil),                       // 6: proto.Capturer
	(*AddCapturerRequest)(nil),             // 7: proto.AddCapturerRequest
	(*RemoveCapturerRequest)(nil),          // 8: proto.RemoveCapturerRequest
	(*HealthCheckRequest)(nil),             // 9: proto.HealthCheckRequest
	(*HealthCheckResponse)(nil),            // 10: proto.HealthCheckResponse
	(*duration.Duration)(nil),              // 11: google.protobuf.Duration
	(*System)(nil),                         // 12: proto.System
	(*timestamp.Timestamp)(nil),            // 13: google.protobuf.Timestamp
	(*empty.Empty)(nil),                    // 14: google.protobuf.Empty
}
var file_detector_proto_depIdxs = []int32{
	11, // 0: proto.InformStatusRequest.interval:type_name -> google.protobuf.Duration
	6,  // 1: proto.Status.capturers:type_name -> proto.Capturer
	12, // 2: proto.Status.system:type_name -> proto.System
	13, // 3: proto.Result.recognized_at:type_name -> google.protobuf.Timestamp
	13, // 4: proto.Result.captured_at:type_name -> google.protobuf.Timestamp
	0,  // 5: proto.Capturer.status:type_name -> proto.CapturerStatus
	1,  // 6: proto.HealthCheckResponse.status:type_name -> proto.HealthCheckResponse.ServingStatus
	2,  // 7: proto.Detector.LoadCategories:input_type -> proto.LoadCategoriesRequest
	3,  // 8: proto.Detector.InformStatus:input_type -> proto.InformStatusRequest
	14, // 9: proto.Detector.ProcessResults:input_type -> google.protobuf.Empty
	7,  // 10: proto.Detector.AddCapturer:input_type -> proto.AddCapturerRequest
	8,  // 11: proto.Detector.RemoveCapturer:input_type -> proto.RemoveCapturerRequest
	9,  // 12: proto.Health.Check:input_type -> proto.HealthCheckRequest
	9,  // 13: proto.Health.Watch:input_type -> proto.HealthCheckRequest
	14, // 14: proto.Detector.LoadCategories:output_type -> google.protobuf.Empty
	4,  // 15: proto.Detector.InformStatus:output_type -> proto.Status
	5,  // 16: proto.Detector.ProcessResults:output_type -> proto.Result
	14, // 17: proto.Detector.AddCapturer:output_type -> google.protobuf.Empty
	14, // 18: proto.Detector.RemoveCapturer:output_type -> google.protobuf.Empty
	10, // 19: proto.Health.Check:output_type -> proto.HealthCheckResponse
	10, // 20: proto.Health.Watch:output_type -> proto.HealthCheckResponse
	14, // [14:21] is the sub-list for method output_type
	7,  // [7:14] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_detector_proto_init() }
func file_detector_proto_init() {
	if File_detector_proto != nil {
		return
	}
	file_system_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_detector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadCategoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_detector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InformStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_detector_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_detector_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_detector_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capturer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_detector_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCapturerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_detector_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCapturerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_detector_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_detector_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_detector_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_detector_proto_goTypes,
		DependencyIndexes: file_detector_proto_depIdxs,
		EnumInfos:         file_detector_proto_enumTypes,
		MessageInfos:      file_detector_proto_msgTypes,
	}.Build()
	File_detector_proto = out.File
	file_detector_proto_rawDesc = nil
	file_detector_proto_goTypes = nil
	file_detector_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DetectorClient is the client API for Detector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DetectorClient interface {
	LoadCategories(ctx context.Context, in *LoadCategoriesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	InformStatus(ctx context.Context, in *InformStatusRequest, opts ...grpc.CallOption) (Detector_InformStatusClient, error)
	ProcessResults(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Detector_ProcessResultsClient, error)
	AddCapturer(ctx context.Context, in *AddCapturerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveCapturer(ctx context.Context, in *RemoveCapturerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type detectorClient struct {
	cc grpc.ClientConnInterface
}

func NewDetectorClient(cc grpc.ClientConnInterface) DetectorClient {
	return &detectorClient{cc}
}

func (c *detectorClient) LoadCategories(ctx context.Context, in *LoadCategoriesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Detector/LoadCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectorClient) InformStatus(ctx context.Context, in *InformStatusRequest, opts ...grpc.CallOption) (Detector_InformStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Detector_serviceDesc.Streams[0], "/proto.Detector/InformStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &detectorInformStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Detector_InformStatusClient interface {
	Recv() (*Status, error)
	grpc.ClientStream
}

type detectorInformStatusClient struct {
	grpc.ClientStream
}

func (x *detectorInformStatusClient) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *detectorClient) ProcessResults(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Detector_ProcessResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Detector_serviceDesc.Streams[1], "/proto.Detector/ProcessResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &detectorProcessResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Detector_ProcessResultsClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type detectorProcessResultsClient struct {
	grpc.ClientStream
}

func (x *detectorProcessResultsClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *detectorClient) AddCapturer(ctx context.Context, in *AddCapturerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Detector/AddCapturer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detectorClient) RemoveCapturer(ctx context.Context, in *RemoveCapturerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Detector/RemoveCapturer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetectorServer is the server API for Detector service.
type DetectorServer interface {
	LoadCategories(context.Context, *LoadCategoriesRequest) (*empty.Empty, error)
	InformStatus(*InformStatusRequest, Detector_InformStatusServer) error
	ProcessResults(*empty.Empty, Detector_ProcessResultsServer) error
	AddCapturer(context.Context, *AddCapturerRequest) (*empty.Empty, error)
	RemoveCapturer(context.Context, *RemoveCapturerRequest) (*empty.Empty, error)
}

// UnimplementedDetectorServer can be embedded to have forward compatible implementations.
type UnimplementedDetectorServer struct {
}

func (*UnimplementedDetectorServer) LoadCategories(context.Context, *LoadCategoriesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadCategories not implemented")
}
func (*UnimplementedDetectorServer) InformStatus(*InformStatusRequest, Detector_InformStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method InformStatus not implemented")
}
func (*UnimplementedDetectorServer) ProcessResults(*empty.Empty, Detector_ProcessResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessResults not implemented")
}
func (*UnimplementedDetectorServer) AddCapturer(context.Context, *AddCapturerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCapturer not implemented")
}
func (*UnimplementedDetectorServer) RemoveCapturer(context.Context, *RemoveCapturerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCapturer not implemented")
}

func RegisterDetectorServer(s *grpc.Server, srv DetectorServer) {
	s.RegisterService(&_Detector_serviceDesc, srv)
}

func _Detector_LoadCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectorServer).LoadCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Detector/LoadCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectorServer).LoadCategories(ctx, req.(*LoadCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Detector_InformStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InformStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DetectorServer).InformStatus(m, &detectorInformStatusServer{stream})
}

type Detector_InformStatusServer interface {
	Send(*Status) error
	grpc.ServerStream
}

type detectorInformStatusServer struct {
	grpc.ServerStream
}

func (x *detectorInformStatusServer) Send(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func _Detector_ProcessResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DetectorServer).ProcessResults(m, &detectorProcessResultsServer{stream})
}

type Detector_ProcessResultsServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type detectorProcessResultsServer struct {
	grpc.ServerStream
}

func (x *detectorProcessResultsServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _Detector_AddCapturer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCapturerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectorServer).AddCapturer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Detector/AddCapturer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectorServer).AddCapturer(ctx, req.(*AddCapturerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Detector_RemoveCapturer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCapturerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectorServer).RemoveCapturer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Detector/RemoveCapturer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectorServer).RemoveCapturer(ctx, req.(*RemoveCapturerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Detector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Detector",
	HandlerType: (*DetectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadCategories",
			Handler:    _Detector_LoadCategories_Handler,
		},
		{
			MethodName: "AddCapturer",
			Handler:    _Detector_AddCapturer_Handler,
		},
		{
			MethodName: "RemoveCapturer",
			Handler:    _Detector_RemoveCapturer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InformStatus",
			Handler:       _Detector_InformStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ProcessResults",
			Handler:       _Detector_ProcessResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "detector.proto",
}

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthClient interface {
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (Health_WatchClient, error)
}

type healthClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthClient(cc grpc.ClientConnInterface) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/proto.Health/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthClient) Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (Health_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Health_serviceDesc.Streams[0], "/proto.Health/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &healthWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Health_WatchClient interface {
	Recv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type healthWatchClient struct {
	grpc.ClientStream
}

func (x *healthWatchClient) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HealthServer is the server API for Health service.
type HealthServer interface {
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Watch(*HealthCheckRequest, Health_WatchServer) error
}

// UnimplementedHealthServer can be embedded to have forward compatible implementations.
type UnimplementedHealthServer struct {
}

func (*UnimplementedHealthServer) Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedHealthServer) Watch(*HealthCheckRequest, Health_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func RegisterHealthServer(s *grpc.Server, srv HealthServer) {
	s.RegisterService(&_Health_serviceDesc, srv)
}

func _Health_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Health/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Health_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HealthServer).Watch(m, &healthWatchServer{stream})
}

type Health_WatchServer interface {
	Send(*HealthCheckResponse) error
	grpc.ServerStream
}

type healthWatchServer struct {
	grpc.ServerStream
}

func (x *healthWatchServer) Send(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Health_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Health_Check_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Health_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "detector.proto",
}
