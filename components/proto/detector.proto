syntax = "proto3";
package proto;

import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/eloylp/aton/components/proto";

service Detector {
  rpc LoadCategories(LoadCategoriesRequest) returns (google.protobuf.Empty);
  rpc InformStatus(InformStatusRequest) returns (stream Status);
  rpc InformResults(google.protobuf.Empty) returns (stream Result);
  rpc AddCapturer(AddCapturerRequest) returns (google.protobuf.Empty);
  rpc RemoveCapturer(RemoveCapturerRequest) returns (google.protobuf.Empty);
}

message LoadCategoriesRequest {
  repeated string categories = 1;
  bytes image = 2;
}

message InformStatusRequest{
  google.protobuf.Duration interval = 1;
}

message Status {
  string description = 1;
  repeated Capturer capturers = 2;
  CapturerType detection_type = 3;
}

message Result {
  string capturer_uuid = 1;
  repeated string matches = 2;
  bool success = 3;
  google.protobuf.Timestamp recognized_at = 4;
}

message Capturer {
  string uuid = 1;
  string url = 2;
  CapturerStatus status = 3;
  CapturerType type = 4;
}

message AddCapturerRequest {
  string capturer_uuid = 1;
  string capturer_url = 2;
  CapturerType capturer_type = 3;
}

enum CapturerType {
  CAPTURER_TYPE_FACE = 0;
  CAPTURER_TYPE_OBJECT = 1;
}

enum CapturerStatus {
  CAPTURER_STATUS_OK = 0;
  CAPTURER_STATUS_CONNECTION_RETRY = 1;
}

message RemoveCapturerRequest {
  string capturer_uuid = 1;
}

// gRPC Healthcheck protocol - https://github.com/grpc/grpc/blob/master/doc/health-checking.md
service Health {
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
  rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);
}

message HealthCheckRequest {
  string service = 1;
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
  }
  ServingStatus status = 1;
}